"use client";
import { Form, Input, Flex, Button, Checkbox, Typography } from "antd";
import { LockOutlined, UserOutlined } from "@ant-design/icons";
import { useState } from "react";
import { GoogleCredentialResponse, GoogleLogin } from "@react-oauth/google";
import { login, loginGoogle } from "@/lib/services/authentication/auth.service";
import { showErrorToast } from "@/components/common/toast/toast";
import { jwtDecode } from "jwt-decode";
import { Constants } from "@/lib/constants";
import { useRouter } from "next/navigation";
import { TokenPayload } from "@/models/user/TokenPayload.model";
import { Image } from "antd";
import Spinner from "@/components/common/spinner/spin";
import Link from "next/link";
import { useAuth } from "@/lib/auth/auth-context";
import PageWrapper from "@/components/common/spinner/PageWrapper";

const { Title, Text } = Typography;

export default function Page() {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();
  const { loginSuccess } = useAuth();
  //login
  const onFinish = async () => {
    setLoading(true);
    try {
      debugger;
      const response = await login(email, password);
      if (response.success) {
        const token = response.data.access_token;
        const refresh_token = response.data.refresh_token;
        localStorage.setItem(Constants.API_TOKEN_KEY, token);
        localStorage.setItem(Constants.API_REFRESH_TOKEN_KEY, refresh_token);
        if (!response || typeof response.success === "undefined") {
          throw new Error("L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ m√°y ch·ªß");
        }
        if (token) {
          const decoded = jwtDecode<TokenPayload>(token);

          //L∆∞u th√¥ng tin ng∆∞·ªùi d√πng
          localStorage.setItem("currentUser", JSON.stringify(decoded));

          // C·∫≠p nh·∫≠t auth context
          loginSuccess(token);

          localStorage.setItem(Constants.API_FIRST_LOGIN, "true");
          router.replace(decoded.role === "ADMIN" ? "/admin" : "/");
        }
        return;
      }

      localStorage.removeItem(Constants.API_TOKEN_KEY);
      localStorage.removeItem(Constants.API_REFRESH_TOKEN_KEY);
      const message =
        typeof response?.data?.message === "string"
          ? response.data.message
          : response?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";
      showErrorToast(message);
    } catch (error: any) {
      const errorMessage =
        error?.response?.data?.message || error?.message || "ƒê√£ x·∫£y ra l·ªói";
      if (errorMessage) {
        showErrorToast(errorMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  //login with google
  const handleLoginGoogle = async (
    credentialReponse: GoogleCredentialResponse
  ) => {
    setLoading(true);
    try {
      const credential = credentialReponse.credential;
      if (!credential) {
        showErrorToast("T√†i kho·∫£n email kh√¥ng t·ªìn t·∫°i");
        return;
      }

      const response = await loginGoogle(credential);
      if (response.success) {
        const token = response.data.access_token;
        const refresh_token = response.data.refresh_token;
        localStorage.setItem(Constants.API_TOKEN_KEY, token);
        localStorage.setItem(Constants.API_REFRESH_TOKEN_KEY, refresh_token);
        if (token) {
          const decoded = jwtDecode<TokenPayload>(token);

          localStorage.setItem("currentUser", JSON.stringify(decoded));

          // C·∫≠p nh·∫≠t auth context
          loginSuccess(token);

          localStorage.setItem(Constants.API_FIRST_LOGIN, "true");

          router.replace(
            decoded.role === "USER" ? "/" : "/authentication/login"
          );
          return;
        }
      } else {
        // X√≥a token c≈© khi login th·∫•t b·∫°i
        localStorage.removeItem(Constants.API_TOKEN_KEY);
        localStorage.removeItem(Constants.API_REFRESH_TOKEN_KEY);

        const message =
          typeof response?.data?.message === "string"
            ? response.data.message
            : response?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";
        showErrorToast(message);
      }
    } catch (error: any) {
      // X√≥a token c≈© khi c√≥ l·ªói
      localStorage.removeItem(Constants.API_TOKEN_KEY);
      localStorage.removeItem(Constants.API_REFRESH_TOKEN_KEY);

      const errorMessage =
        error?.response?.data?.message || error?.message || "ƒê√£ x·∫£y ra l·ªói";
      if (errorMessage) {
        showErrorToast(errorMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <Spinner />;
  }
  return (
    <PageWrapper>
      <div className="login-page-container">
        {/* Left Side - Branding */}
        <div className="login-branding">
          <div className="branding-content">
            <div className="logo-container">
              <Link href="/" className="logo-link">
                <div className="logo-background">
                  <Image
                    width={180}
                    src="/Project Hub logo.png"
                    alt="Project Hub Logo"
                    preview={false}
                    className="brand-logo"
                  />
                </div>
              </Link>
            </div>
            <div className="brand-text">
              <Title level={1} className="brand-title">
                Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i
              </Title>
              <Text className="brand-subtitle">
                ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c qu·∫£n l√Ω d·ª± √°n c·ªßa b·∫°n m·ªôt c√°ch hi·ªáu qu·∫£
              </Text>
            </div>
            <div className="brand-features">
              <div className="feature-item">
                <div className="feature-icon">üìä</div>
                <div className="feature-text">
                  <Text strong>Qu·∫£n l√Ω d·ª± √°n th√¥ng minh</Text>
                  <Text type="secondary">
                    Theo d√µi ti·∫øn ƒë·ªô v√† t·ªëi ∆∞u h√≥a workflow
                  </Text>
                </div>
              </div>
              <div className="feature-item">
                <div className="feature-icon">üë•</div>
                <div className="feature-text">
                  <Text strong>L√†m vi·ªác nh√≥m hi·ªáu qu·∫£</Text>
                  <Text type="secondary">
                    C·ªông t√°c m∆∞·ª£t m√† v·ªõi team c·ªßa b·∫°n
                  </Text>
                </div>
              </div>
              <div className="feature-item">
                <div className="feature-icon">üìà</div>
                <div className="feature-text">
                  <Text strong>B√°o c√°o chi ti·∫øt</Text>
                  <Text type="secondary">
                    Ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh
                  </Text>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Side - Login Form */}
        <div className="login-form-section">
          <div className="form-container">
            <Form onFinish={onFinish} layout="vertical">
              <Form.Item
                name="email"
                rules={[
                  { required: true, message: "Please input your email!" },
                  {
                    type: "email",
                    message: "Email must be include @example.com!",
                  },
                ]}
              >
                <Input
                  prefix={<UserOutlined />}
                  placeholder="Email"
                  onChange={(e) => setEmail(e.target.value)}
                />
              </Form.Item>
              <Form.Item
                name="password"
                rules={[
                  { required: true, message: "Please input your Password!" },
                  {
                    pattern: /^[A-Za-z\d]{8,}$/,
                    message:
                      "M·∫≠t kh·∫©u ph·∫£i t·ªëi thi·ªÉu 8 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ v√† s·ªë, kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng!",
                  },
                ]}
              >
                <Input
                  prefix={<LockOutlined />}
                  type="password"
                  placeholder="Password"
                  onChange={(e) => setPassword(e.target.value)}
                />
              </Form.Item>
              <Form.Item>
                <Flex justify="space-between" align="center">
                  <Link
                    href={"/authentication/forgot-password"}
                    className="text-sm text-blue-500 hover:decoration-solid hover:underline"
                  >
                    Forgot password?
                  </Link>
                </Flex>
              </Form.Item>

              <Form.Item>
                <Button block type="primary" htmlType="submit" className="mb-2">
                  Log in
                </Button>

                <GoogleLogin
                  onSuccess={(credentialResponse) => {
                    setLoading(true); // ƒê·∫£m b·∫£o b·∫≠t spinner ngay l·∫≠p t·ª©c
                    handleLoginGoogle(credentialResponse);
                  }}
                  onError={() => {
                    showErrorToast("ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i");
                  }}
                />
              </Form.Item>

              <div className="text-center mt-4">
                <Text type="secondary">
                  Ch∆∞a c√≥ t√†i kho·∫£n?{" "}
                  <Link
                    href="/authentication/register"
                    className="text-blue-500 hover:text-blue-600 hover:underline"
                  >
                    ƒêƒÉng k√Ω ngay
                  </Link>
                </Text>
              </div>
            </Form>
          </div>
        </div>
      </div>
    </PageWrapper>
  );
}
